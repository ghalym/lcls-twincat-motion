Example.tmc
==================

Records
-------
```
 "TST:SIM:MOT:01:PLC:bAllBackwardEnable_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bAllEnable_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bAllForwardEnable_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bBrakeRelease_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bBusy_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bDone_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bEnable" (bo)
 "TST:SIM:MOT:01:PLC:bEnableDone_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bEnable_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bError_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bExecute" (bo)
 "TST:SIM:MOT:01:PLC:bExecute_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bGantryAxis_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bGantryBackwardEnable_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bGantryForwardEnable_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bHardwareEnable_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bHome_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bLimitBackwardEnable_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bLimitForwardEnable_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bPowerSelf_RBV" (bi)
 "TST:SIM:MOT:01:PLC:bReset" (bo)
 "TST:SIM:MOT:01:PLC:bReset_RBV" (bi)
 "TST:SIM:MOT:01:PLC:fAcceleration" (ao)
 "TST:SIM:MOT:01:PLC:fAcceleration_RBV" (ai)
 "TST:SIM:MOT:01:PLC:fDeceleration" (ao)
 "TST:SIM:MOT:01:PLC:fDeceleration_RBV" (ai)
 "TST:SIM:MOT:01:PLC:fHomePosition" (ao)
 "TST:SIM:MOT:01:PLC:fHomePosition_RBV" (ai)
 "TST:SIM:MOT:01:PLC:fPosition" (ao)
 "TST:SIM:MOT:01:PLC:fPosition_RBV" (ai)
 "TST:SIM:MOT:01:PLC:fVelocity" (ao)
 "TST:SIM:MOT:01:PLC:fVelocity_RBV" (ai)
 "TST:SIM:MOT:01:PLC:nBrakeMode_RBV" (mbbi)
 "TST:SIM:MOT:01:PLC:nCmdData" (longout)
 "TST:SIM:MOT:01:PLC:nCmdData_RBV" (longin)
 "TST:SIM:MOT:01:PLC:nCommand" (longout)
 "TST:SIM:MOT:01:PLC:nCommand_RBV" (longin)
 "TST:SIM:MOT:01:PLC:nEnableMode_RBV" (mbbi)
 "TST:SIM:MOT:01:PLC:nErrorId_RBV" (longin)
 "TST:SIM:MOT:01:PLC:nHomingMode_RBV" (mbbi)
 "TST:SIM:MOT:01:PLC:nMotionAxisID_RBV" (longin)
 "TST:SIM:MOT:01:PLC:sErrorMessage_RBV" (waveform)
 "TST:SIM:MOT:02:PLC:bAllBackwardEnable_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bAllEnable_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bAllForwardEnable_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bBrakeRelease_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bBusy_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bDone_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bEnable" (bo)
 "TST:SIM:MOT:02:PLC:bEnableDone_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bEnable_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bError_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bExecute" (bo)
 "TST:SIM:MOT:02:PLC:bExecute_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bGantryAxis_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bGantryBackwardEnable_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bGantryForwardEnable_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bHardwareEnable_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bHome_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bLimitBackwardEnable_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bLimitForwardEnable_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bPowerSelf_RBV" (bi)
 "TST:SIM:MOT:02:PLC:bReset" (bo)
 "TST:SIM:MOT:02:PLC:bReset_RBV" (bi)
 "TST:SIM:MOT:02:PLC:fAcceleration" (ao)
 "TST:SIM:MOT:02:PLC:fAcceleration_RBV" (ai)
 "TST:SIM:MOT:02:PLC:fDeceleration" (ao)
 "TST:SIM:MOT:02:PLC:fDeceleration_RBV" (ai)
 "TST:SIM:MOT:02:PLC:fHomePosition" (ao)
 "TST:SIM:MOT:02:PLC:fHomePosition_RBV" (ai)
 "TST:SIM:MOT:02:PLC:fPosition" (ao)
 "TST:SIM:MOT:02:PLC:fPosition_RBV" (ai)
 "TST:SIM:MOT:02:PLC:fVelocity" (ao)
 "TST:SIM:MOT:02:PLC:fVelocity_RBV" (ai)
 "TST:SIM:MOT:02:PLC:nBrakeMode_RBV" (mbbi)
 "TST:SIM:MOT:02:PLC:nCmdData" (longout)
 "TST:SIM:MOT:02:PLC:nCmdData_RBV" (longin)
 "TST:SIM:MOT:02:PLC:nCommand" (longout)
 "TST:SIM:MOT:02:PLC:nCommand_RBV" (longin)
 "TST:SIM:MOT:02:PLC:nEnableMode_RBV" (mbbi)
 "TST:SIM:MOT:02:PLC:nErrorId_RBV" (longin)
 "TST:SIM:MOT:02:PLC:nHomingMode_RBV" (mbbi)
 "TST:SIM:MOT:02:PLC:nMotionAxisID_RBV" (longin)
 "TST:SIM:MOT:02:PLC:sErrorMessage_RBV" (waveform)
```

EPICS database
--------------
```
record(bi, "TST:SIM:MOT:01:PLC:bLimitForwardEnable_RBV") {
  field(DESC, "FALSE if forward limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bLimitForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:01:PLC:bLimitBackwardEnable_RBV") {
  field(DESC, "FALSE if reverse limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bLimitBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:01:PLC:bHome_RBV") {
  field(DESC, "TRUE if at homing switch")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bHome?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:01:PLC:bBrakeRelease_RBV") {
  field(DESC, "TRUE if brake released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bBrakeRelease?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:01:PLC:bHardwareEnable_RBV") {
  field(DESC, "TRUE if STO not hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bHardwareEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:01:PLC:bAllForwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bAllForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:01:PLC:bAllBackwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bAllBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:01:PLC:bAllEnable_RBV") {
  field(DESC, "Summary of axis permission to have power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bAllEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:01:PLC:bGantryForwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bGantryForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:01:PLC:bGantryBackwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bGantryBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:01:PLC:bPowerSelf_RBV") {
  field(DESC, "FALSE if axis is in PMPS")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bPowerSelf?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(mbbi, "TST:SIM:MOT:01:PLC:nEnableMode_RBV") {
  field(DESC, "Describes when the axis will automatically get power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.nEnableMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "ALWAYS")
  field(ONST, "NEVER")
  field(TWST, "DURING_MOTION")
}

record(mbbi, "TST:SIM:MOT:01:PLC:nBrakeMode_RBV") {
  field(DESC, "Describes when the brake will be released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.nBrakeMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "IF_ENABLED")
  field(ONST, "IF_MOVING")
  field(TWST, "NO_BRAKE")
}

record(mbbi, "TST:SIM:MOT:01:PLC:nHomingMode_RBV") {
  field(DESC, "Describes our homing strategy")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.nHomingMode?")
  field(ZRVL, "-1")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "15")
  field(ZRST, "NONE")
  field(ONST, "LOW_LIMIT")
  field(TWST, "HIGH_LIMIT")
  field(THST, "HOME_VIA_LOW")
  field(FRST, "HOME_VIA_HIGH")
  field(FVST, "ABSOLUTE_SET")
}

record(bi, "TST:SIM:MOT:01:PLC:bGantryAxis_RBV") {
  field(DESC, "TRUE if gantry EPS active")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bGantryAxis?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:01:PLC:bEnable_RBV") {
  field(DESC, "Used internally to request enables")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "TST:SIM:MOT:01:PLC:bEnable") {
  field(DESC, "Used internally to request enables")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M1.bEnable=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosave_pass0, "VAL")
}

record(bi, "TST:SIM:MOT:01:PLC:bReset_RBV") {
  field(DESC, "Used internally to reset errors")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bReset?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "TST:SIM:MOT:01:PLC:bReset") {
  field(DESC, "Used internally to reset errors")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M1.bReset=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosave_pass0, "VAL")
}

record(bi, "TST:SIM:MOT:01:PLC:bExecute_RBV") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bExecute?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "TST:SIM:MOT:01:PLC:bExecute") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M1.bExecute=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosave_pass0, "VAL")
}

record(longin, "TST:SIM:MOT:01:PLC:nCommand_RBV") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.nCommand?")
}

record(longout, "TST:SIM:MOT:01:PLC:nCommand") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M1.nCommand=")
  info(autosave_pass0, "VAL")
}

record(longin, "TST:SIM:MOT:01:PLC:nCmdData_RBV") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.nCmdData?")
}

record(longout, "TST:SIM:MOT:01:PLC:nCmdData") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M1.nCmdData=")
  info(autosave_pass0, "VAL")
}

record(ai, "TST:SIM:MOT:01:PLC:fPosition_RBV") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.fPosition?")
  field(PREC, "3")
  info(autosave_pass0, "PREC")
}

record(ao, "TST:SIM:MOT:01:PLC:fPosition") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M1.fPosition=")
  field(PREC, "3")
  info(autosave_pass0, "PREC VAL")
}

record(ai, "TST:SIM:MOT:01:PLC:fVelocity_RBV") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.fVelocity?")
  field(PREC, "3")
  info(autosave_pass0, "PREC")
}

record(ao, "TST:SIM:MOT:01:PLC:fVelocity") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M1.fVelocity=")
  field(PREC, "3")
  info(autosave_pass0, "PREC VAL")
}

record(ai, "TST:SIM:MOT:01:PLC:fAcceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.fAcceleration?")
  field(PREC, "3")
  info(autosave_pass0, "PREC")
}

record(ao, "TST:SIM:MOT:01:PLC:fAcceleration") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M1.fAcceleration=")
  field(PREC, "3")
  info(autosave_pass0, "PREC VAL")
}

record(ai, "TST:SIM:MOT:01:PLC:fDeceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.fDeceleration?")
  field(PREC, "3")
  info(autosave_pass0, "PREC")
}

record(ao, "TST:SIM:MOT:01:PLC:fDeceleration") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M1.fDeceleration=")
  field(PREC, "3")
  info(autosave_pass0, "PREC VAL")
}

record(ai, "TST:SIM:MOT:01:PLC:fHomePosition_RBV") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.fHomePosition?")
  field(PREC, "3")
  info(autosave_pass0, "PREC")
}

record(ao, "TST:SIM:MOT:01:PLC:fHomePosition") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M1.fHomePosition=")
  field(PREC, "3")
  info(autosave_pass0, "PREC VAL")
}

record(longin, "TST:SIM:MOT:01:PLC:nMotionAxisID_RBV") {
  field(DESC, "Unique ID assigned to each axis in the NC")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.nMotionAxisID?")
}

record(bi, "TST:SIM:MOT:01:PLC:bEnableDone_RBV") {
  field(DESC, "TRUE if done enabling")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bEnableDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "TST:SIM:MOT:01:PLC:bBusy_RBV") {
  field(DESC, "TRUE if in the middle of a command")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bBusy?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "TST:SIM:MOT:01:PLC:bDone_RBV") {
  field(DESC, "TRUE if command finished successfully")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "TST:SIM:MOT:01:PLC:bError_RBV") {
  field(DESC, "TRUE if we")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.bError?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(longin, "TST:SIM:MOT:01:PLC:nErrorId_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.nErrorId?")
}

record(waveform, "TST:SIM:MOT:01:PLC:sErrorMessage_RBV") {
  field(DESC, "Message to identify the error state")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M1.sErrorMessage?")
  field(FTVL, "CHAR")
  field(NELM, "80")
}

record(bi, "TST:SIM:MOT:02:PLC:bLimitForwardEnable_RBV") {
  field(DESC, "FALSE if forward limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bLimitForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:02:PLC:bLimitBackwardEnable_RBV") {
  field(DESC, "FALSE if reverse limit hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bLimitBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:02:PLC:bHome_RBV") {
  field(DESC, "TRUE if at homing switch")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bHome?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:02:PLC:bBrakeRelease_RBV") {
  field(DESC, "TRUE if brake released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bBrakeRelease?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:02:PLC:bHardwareEnable_RBV") {
  field(DESC, "TRUE if STO not hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bHardwareEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:02:PLC:bAllForwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bAllForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:02:PLC:bAllBackwardEnable_RBV") {
  field(DESC, "Summary of axis permission to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bAllBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:02:PLC:bAllEnable_RBV") {
  field(DESC, "Summary of axis permission to have power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bAllEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:02:PLC:bGantryForwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move forward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bGantryForwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:02:PLC:bGantryBackwardEnable_RBV") {
  field(DESC, "TRUE if gantry ok to move backward")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bGantryBackwardEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:02:PLC:bPowerSelf_RBV") {
  field(DESC, "FALSE if axis is in PMPS")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bPowerSelf?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(mbbi, "TST:SIM:MOT:02:PLC:nEnableMode_RBV") {
  field(DESC, "Describes when the axis will automatically get power")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.nEnableMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "ALWAYS")
  field(ONST, "NEVER")
  field(TWST, "DURING_MOTION")
}

record(mbbi, "TST:SIM:MOT:02:PLC:nBrakeMode_RBV") {
  field(DESC, "Describes when the brake will be released")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.nBrakeMode?")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "IF_ENABLED")
  field(ONST, "IF_MOVING")
  field(TWST, "NO_BRAKE")
}

record(mbbi, "TST:SIM:MOT:02:PLC:nHomingMode_RBV") {
  field(DESC, "Describes our homing strategy")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.nHomingMode?")
  field(ZRVL, "-1")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "15")
  field(ZRST, "NONE")
  field(ONST, "LOW_LIMIT")
  field(TWST, "HIGH_LIMIT")
  field(THST, "HOME_VIA_LOW")
  field(FRST, "HOME_VIA_HIGH")
  field(FVST, "ABSOLUTE_SET")
}

record(bi, "TST:SIM:MOT:02:PLC:bGantryAxis_RBV") {
  field(DESC, "TRUE if gantry EPS active")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bGantryAxis?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bi, "TST:SIM:MOT:02:PLC:bEnable_RBV") {
  field(DESC, "Used internally to request enables")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "TST:SIM:MOT:02:PLC:bEnable") {
  field(DESC, "Used internally to request enables")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M2.bEnable=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosave_pass0, "VAL")
}

record(bi, "TST:SIM:MOT:02:PLC:bReset_RBV") {
  field(DESC, "Used internally to reset errors")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bReset?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "TST:SIM:MOT:02:PLC:bReset") {
  field(DESC, "Used internally to reset errors")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M2.bReset=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosave_pass0, "VAL")
}

record(bi, "TST:SIM:MOT:02:PLC:bExecute_RBV") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bExecute?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
}

record(bo, "TST:SIM:MOT:02:PLC:bExecute") {
  field(DESC, "Used internally and by the IOC to start or stop")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M2.bExecute=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosave_pass0, "VAL")
}

record(longin, "TST:SIM:MOT:02:PLC:nCommand_RBV") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.nCommand?")
}

record(longout, "TST:SIM:MOT:02:PLC:nCommand") {
  field(DESC, "Used internally and by the IOC to pick move type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M2.nCommand=")
  info(autosave_pass0, "VAL")
}

record(longin, "TST:SIM:MOT:02:PLC:nCmdData_RBV") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.nCmdData?")
}

record(longout, "TST:SIM:MOT:02:PLC:nCmdData") {
  field(DESC, "Used internally and by the IOC to pass extra args")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M2.nCmdData=")
  info(autosave_pass0, "VAL")
}

record(ai, "TST:SIM:MOT:02:PLC:fPosition_RBV") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.fPosition?")
  field(PREC, "3")
  info(autosave_pass0, "PREC")
}

record(ao, "TST:SIM:MOT:02:PLC:fPosition") {
  field(DESC, "Used internally and by the IOC as the set position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M2.fPosition=")
  field(PREC, "3")
  info(autosave_pass0, "PREC VAL")
}

record(ai, "TST:SIM:MOT:02:PLC:fVelocity_RBV") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.fVelocity?")
  field(PREC, "3")
  info(autosave_pass0, "PREC")
}

record(ao, "TST:SIM:MOT:02:PLC:fVelocity") {
  field(DESC, "Used internally and by the IOC to set velocity")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M2.fVelocity=")
  field(PREC, "3")
  info(autosave_pass0, "PREC VAL")
}

record(ai, "TST:SIM:MOT:02:PLC:fAcceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.fAcceleration?")
  field(PREC, "3")
  info(autosave_pass0, "PREC")
}

record(ao, "TST:SIM:MOT:02:PLC:fAcceleration") {
  field(DESC, "Used internally and by the IOC to set acceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M2.fAcceleration=")
  field(PREC, "3")
  info(autosave_pass0, "PREC VAL")
}

record(ai, "TST:SIM:MOT:02:PLC:fDeceleration_RBV") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.fDeceleration?")
  field(PREC, "3")
  info(autosave_pass0, "PREC")
}

record(ao, "TST:SIM:MOT:02:PLC:fDeceleration") {
  field(DESC, "Used internally and by the IOC to set deceleration")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M2.fDeceleration=")
  field(PREC, "3")
  info(autosave_pass0, "PREC VAL")
}

record(ai, "TST:SIM:MOT:02:PLC:fHomePosition_RBV") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.fHomePosition?")
  field(PREC, "3")
  info(autosave_pass0, "PREC")
}

record(ao, "TST:SIM:MOT:02:PLC:fHomePosition") {
  field(DESC, "Used internally and by the IOC to pick home position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=852/Main.M2.fHomePosition=")
  field(PREC, "3")
  info(autosave_pass0, "PREC VAL")
}

record(longin, "TST:SIM:MOT:02:PLC:nMotionAxisID_RBV") {
  field(DESC, "Unique ID assigned to each axis in the NC")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.nMotionAxisID?")
}

record(bi, "TST:SIM:MOT:02:PLC:bEnableDone_RBV") {
  field(DESC, "TRUE if done enabling")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bEnableDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "TST:SIM:MOT:02:PLC:bBusy_RBV") {
  field(DESC, "TRUE if in the middle of a command")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bBusy?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "TST:SIM:MOT:02:PLC:bDone_RBV") {
  field(DESC, "TRUE if command finished successfully")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bDone?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(bi, "TST:SIM:MOT:02:PLC:bError_RBV") {
  field(DESC, "TRUE if we")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.bError?")
  field(ZNAM, "TRUE")
  field(ONAM, "FALSE")
}

record(longin, "TST:SIM:MOT:02:PLC:nErrorId_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.nErrorId?")
}

record(waveform, "TST:SIM:MOT:02:PLC:sErrorMessage_RBV") {
  field(DESC, "Message to identify the error state")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=852/POLL_RATE=1/Main.M2.sErrorMessage?")
  field(FTVL, "CHAR")
  field(NELM, "80")
}```
